# --
# File: symantecsa_connector.py
#
# Copyright (c) 2019 Splunk Inc.
#
# SPLUNK CONFIDENTIAL - Use or disclosure of this material in whole or in part
# without a valid written license from Splunk Inc. is PROHIBITED.
#
# --

# Phantom imports
import phantom.app as phantom
from phantom.base_connector import BaseConnector
from phantom.action_result import ActionResult
from phantom.vault import Vault

# THIS Connector imports
from symantecsa_consts import *

import requests
import simplejson as json
import soleraconnector as solera


class SymantecsaConnector(BaseConnector):
    ACTION_ID_TEST_ASSET_CONNECTIVITY = "test_connectivity"
    ACTION_ID_GET_PACKET_DETAILS = "get_packet_details"

    def __init__(self):

        super(SymantecsaConnector, self).__init__()

    def initialize(self):
        '''
        Initializes the authentication tuple that the REST call needs

        :return:
        '''
        config = self.get_config()
        self._username = config[SYMANTECSA_CONFIG_USERNAME]
        self._apikey = config[SYMANTECSA_CONFIG_API_KEY]
        self._device_ip = config[SYMANTECSA_CONFIG_DEVICE_IP]
        self._verify = config[phantom.APP_JSON_VERIFY]
        self._auth = (self._username, self._apikey)
        self._connector = solera.SoleraConnector(self._username, self._apikey,
                                                 self._device_ip, SYMANTECSA_API_VERSION)
        return phantom.APP_SUCCESS

    def _make_rest_call(self, action_result, endpoint, data={}, test=False):
        ''' Calls the API v6 and returns the result

        :param endpoint: URI of the API endpoint
        :param params: Params, if any
        :param method: HTTP Method GET or POST
        :param test: If this is a test connectivity.  Default False
        :return: True or False, and Error Message or response result
        '''
        # V6 is needed for the updated download query
        url = "https://" + self._device_ip + SYMANTECSA_ENDPOINT_BASE_URI + endpoint
        if test:
            url = endpoint
        r = requests.get(url, auth=self._auth, verify=self._verify, data=data)
        try:
            resp_json = r.json()
        except:
            action_result.set_message("Error parsing response to JSON.  Reason: {}".format(r.text))
            return (phantom.APP_ERROR)
        return (phantom.APP_SUCCESS, resp_json)

    def _test_connectivity(self):
        """ Function that handles the test connectivity action, it is much simpler than other action handlers.
        """
        # Progress
        self.save_progress(SYMANTECSA_TEST_CONNECTIVITY_START, base_url=self._device_ip)
        # set the endpoint
        endpoint = 'https://' + self._device_ip + SYMANTECSA_ENDPOINT_TEST_CONNECTIVITY
        # Connectivity
        self.save_progress(phantom.APP_PROG_CONNECTING_TO_ELLIPSES, endpoint)
        # Action result to represent the call
        action_result = ActionResult()
        # Progress message, since it is test connectivity, it pays to be verbose
        self.save_progress("Making a test REST call")
        # Make the rest endpoint call
        ret_val, response = self._make_rest_call(action_result, endpoint, test=True)
        # Process errors
        if (phantom.is_fail(ret_val)) or response.get('ResultCode') != API_SUCCESS_CODE:
            # Dump error messages in the log
            self.debug_print(action_result.get_message())
            # Set the status of the complete connector result
            self.set_status(phantom.APP_ERROR, action_result.get_message())
            # Append the message to display
            self.append_to_message(SYMANTECSA_TEST_CONNECTIVITY_ERROR)
            # return error
            return phantom.APP_ERROR
        # Set the status of the connector result
        self.save_progress("Test Connectivity succeeded")
        return self.set_status_save_progress(phantom.APP_SUCCESS)

    def _get_packet_details(self, params):
        '''
        Currently the only action that is supported by this app (aside from test connectivity).
        Retrieves a pcap file generated by Security Analytics.
        :param params: from the action_result handler
        :return: an action result
        '''
        action_result = self.add_action_result(ActionResult(dict(params)))
        start_time = params[SYMANTECSA_ACTION_PARAM_START_TIME]
        end_time = params[SYMANTECSA_ACTION_PARAM_END_TIME]
        name = params[SYMANTECSA_ACTION_PARAM_NAME]
        filter = params[SYMANTECSA_ACTION_PARAM_FILTER]
        kwargs = {
            "download": {
                "mountId": [],
                "type": "browser"
            },
            "download_flag": "pcap",
            "download_type": 1,
            "filter": filter,
            "method": "query",
            "mount_id": [],
            "name": name,
            "pcapType": "pcap",
            "progress": False,
            "query": [],
            "timespan": {
                "end": end_time,
                "start": start_time
            },
            "url_auth_web_service_routes": True
        }
        resp = self._connector.callAPI('GET', SYMANTECSA_ENDPOINT_GET_PACKET_DETAILS, kwargs,
                                       SYMANTECSA_PCAP_FILE_DOWNLOAD_LOCATION.format(NAME=name))
        Vault.add_attachment(SYMANTECSA_PCAP_FILE_DOWNLOAD_LOCATION.format(NAME=name), self.get_container_id())
        action_result.add_data(resp)
        return action_result.set_status(phantom.APP_SUCCESS, SYMANTECSA_GET_PCAP_SUCCESS)

    def handle_action(self, params):

        action = self.get_action_identifier()
        ret_val = phantom.APP_SUCCESS
        if (action == self.ACTION_ID_GET_PACKET_DETAILS):
            ret_val = self._get_packet_details(params)
        elif (action == self.ACTION_ID_TEST_ASSET_CONNECTIVITY):
            ret_val = self._test_connectivity()
        return ret_val


if __name__ == '__main__':
    # Imports
    import sys
    import pudb

    # Breakpoint at runtime
    pudb.set_trace()

    # The first param is the input json file
    with open(sys.argv[1]) as f:
        # Load the input json file
        in_json = f.read()
        in_json = json.loads(in_json)
        print(json.dumps(in_json, indent=' ' * 4))

        # Create the connector class object
        connector = SymantecsaConnector()

        # Se the member vars
        connector.print_progress_message = True

        # Call BaseConnector::_handle_action(...) to kickoff action handling.
        ret_val = connector._handle_action(json.dumps(in_json), None)

        # Dump the return value
        print ret_val

    exit(0)
